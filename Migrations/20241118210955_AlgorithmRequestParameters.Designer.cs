// <auto-generated />
using System;
using API_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241118210955_AlgorithmRequestParameters")]
    partial class AlgorithmRequestParameters
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("API_Backend.Models.AggregatedResult", b =>
                {
                    b.Property<int>("AggregatedResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AggregatedResultID"));

                    b.Property<string>("AggregatedResultDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AggregatedResultFilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AggregatedResultName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AggregatedResultID");

                    b.ToTable("AggregatedResults");
                });

            modelBuilder.Entity("API_Backend.Models.Algorithm", b =>
                {
                    b.Property<int>("AlgorithmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AlgorithmID"));

                    b.Property<string>("AlgorithmName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AlgorithmType")
                        .HasColumnType("int");

                    b.Property<string>("JarFilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MainClassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserID")
                        .HasColumnType("varchar(36)");

                    b.HasKey("AlgorithmID");

                    b.HasIndex("UserID");

                    b.ToTable("Algorithms");
                });

            modelBuilder.Entity("API_Backend.Models.AlgorithmParameter", b =>
                {
                    b.Property<int>("ParameterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ParameterID"));

                    b.Property<int>("AlgorithmID")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DriverIndex")
                        .HasColumnType("int");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ParameterID");

                    b.HasIndex("AlgorithmID");

                    b.ToTable("AlgorithmParameters");
                });

            modelBuilder.Entity("API_Backend.Models.AlgorithmRequestParameters", b =>
                {
                    b.Property<string>("ExperimentID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DatasetName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ExperimentID");

                    b.ToTable("AlgorithmRequestParameters");
                });

            modelBuilder.Entity("API_Backend.Models.ClusterParameters", b =>
                {
                    b.Property<int>("ClusterParamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClusterParamID"));

                    b.Property<int>("DriverCores")
                        .HasColumnType("int");

                    b.Property<string>("DriverMemory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExecutorCores")
                        .HasColumnType("int");

                    b.Property<string>("ExecutorMemory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExecutorNumber")
                        .HasColumnType("int");

                    b.Property<string>("ExperimentID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MemoryOverhead")
                        .HasColumnType("int");

                    b.Property<int>("NodeCount")
                        .HasColumnType("int");

                    b.HasKey("ClusterParamID");

                    b.HasIndex("ExperimentID")
                        .IsUnique();

                    b.ToTable("ClusterParameters");
                });

            modelBuilder.Entity("API_Backend.Models.CsvResult", b =>
                {
                    b.Property<int>("CsvResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CsvResultID"));

                    b.Property<int>("AggregatedResultID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CsvResultDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CsvResultFilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CsvResultName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CsvResultID");

                    b.HasIndex("AggregatedResultID");

                    b.ToTable("CsvResults");
                });

            modelBuilder.Entity("API_Backend.Models.DataVisualizationModel", b =>
                {
                    b.Property<int>("VisualizationRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VisualizationRequestID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VisualizationDataFilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("VisualizationRequestID");

                    b.ToTable("DataVisualizations");
                });

            modelBuilder.Entity("API_Backend.Models.ExperimentAlgorithmParameterValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AlgorithmRequestParametersExperimentID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExperimentID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ParameterID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("AlgorithmRequestParametersExperimentID");

                    b.HasIndex("ExperimentID");

                    b.HasIndex("ParameterID");

                    b.ToTable("ExperimentAlgorithmParameterValues");
                });

            modelBuilder.Entity("API_Backend.Models.ExperimentRequest", b =>
                {
                    b.Property<string>("ExperimentID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AlgorithmID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("ExperimentID");

                    b.HasIndex("AlgorithmID");

                    b.HasIndex("UserID");

                    b.ToTable("ExperimentRequests");
                });

            modelBuilder.Entity("API_Backend.Models.ExperimentResult", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ResultID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExperimentID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MetaDataFilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ResultFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ResultFilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ResultID");

                    b.HasIndex("ExperimentID")
                        .IsUnique();

                    b.ToTable("ExperimentResults");
                });

            modelBuilder.Entity("API_Backend.Models.StoredDataSet", b =>
                {
                    b.Property<int>("DataSetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DataSetID"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("DataSetID");

                    b.HasIndex("UserID");

                    b.ToTable("StoredDataSets");
                });

            modelBuilder.Entity("API_Backend.Models.UploadSession", b =>
                {
                    b.Property<Guid>("UploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalChunks")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UploadedChunks")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("UploadId");

                    b.HasIndex("UserID");

                    b.ToTable("UploadSessions");
                });

            modelBuilder.Entity("API_Backend.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API_Backend.Models.VisualizationExperiment", b =>
                {
                    b.Property<int>("VisualizationExperimentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VisualizationExperimentID"));

                    b.Property<string>("ExperimentID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("VisualizationRequestID")
                        .HasColumnType("int");

                    b.HasKey("VisualizationExperimentID");

                    b.HasIndex("ExperimentID");

                    b.HasIndex("VisualizationRequestID");

                    b.ToTable("VisualizationExperiments");
                });

            modelBuilder.Entity("API_Backend.Models.Algorithm", b =>
                {
                    b.HasOne("API_Backend.Models.User", "User")
                        .WithMany("Algorithms")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_Backend.Models.AlgorithmParameter", b =>
                {
                    b.HasOne("API_Backend.Models.Algorithm", "Algorithm")
                        .WithMany("Parameters")
                        .HasForeignKey("AlgorithmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Algorithm");
                });

            modelBuilder.Entity("API_Backend.Models.AlgorithmRequestParameters", b =>
                {
                    b.HasOne("API_Backend.Models.ExperimentRequest", "ExperimentRequest")
                        .WithOne("AlgorithmParameters")
                        .HasForeignKey("API_Backend.Models.AlgorithmRequestParameters", "ExperimentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExperimentRequest");
                });

            modelBuilder.Entity("API_Backend.Models.ClusterParameters", b =>
                {
                    b.HasOne("API_Backend.Models.ExperimentRequest", "ExperimentRequest")
                        .WithOne("ClusterParameters")
                        .HasForeignKey("API_Backend.Models.ClusterParameters", "ExperimentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExperimentRequest");
                });

            modelBuilder.Entity("API_Backend.Models.CsvResult", b =>
                {
                    b.HasOne("API_Backend.Models.AggregatedResult", "AggregatedResult")
                        .WithMany()
                        .HasForeignKey("AggregatedResultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AggregatedResult");
                });

            modelBuilder.Entity("API_Backend.Models.ExperimentAlgorithmParameterValue", b =>
                {
                    b.HasOne("API_Backend.Models.AlgorithmRequestParameters", null)
                        .WithMany("ParameterValues")
                        .HasForeignKey("AlgorithmRequestParametersExperimentID");

                    b.HasOne("API_Backend.Models.ExperimentRequest", "ExperimentRequest")
                        .WithMany()
                        .HasForeignKey("ExperimentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Backend.Models.AlgorithmParameter", "AlgorithmParameter")
                        .WithMany()
                        .HasForeignKey("ParameterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlgorithmParameter");

                    b.Navigation("ExperimentRequest");
                });

            modelBuilder.Entity("API_Backend.Models.ExperimentRequest", b =>
                {
                    b.HasOne("API_Backend.Models.Algorithm", "Algorithm")
                        .WithMany("ExperimentRequests")
                        .HasForeignKey("AlgorithmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Backend.Models.User", "User")
                        .WithMany("ExperimentRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Algorithm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_Backend.Models.ExperimentResult", b =>
                {
                    b.HasOne("API_Backend.Models.ExperimentRequest", "ExperimentRequest")
                        .WithOne("ExperimentResult")
                        .HasForeignKey("API_Backend.Models.ExperimentResult", "ExperimentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExperimentRequest");
                });

            modelBuilder.Entity("API_Backend.Models.StoredDataSet", b =>
                {
                    b.HasOne("API_Backend.Models.User", "User")
                        .WithMany("StoredDataSets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_Backend.Models.UploadSession", b =>
                {
                    b.HasOne("API_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_Backend.Models.VisualizationExperiment", b =>
                {
                    b.HasOne("API_Backend.Models.ExperimentRequest", "ExperimentRequest")
                        .WithMany()
                        .HasForeignKey("ExperimentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Backend.Models.DataVisualizationModel", "DataVisualization")
                        .WithMany("VisualizationExperiments")
                        .HasForeignKey("VisualizationRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataVisualization");

                    b.Navigation("ExperimentRequest");
                });

            modelBuilder.Entity("API_Backend.Models.Algorithm", b =>
                {
                    b.Navigation("ExperimentRequests");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("API_Backend.Models.AlgorithmRequestParameters", b =>
                {
                    b.Navigation("ParameterValues");
                });

            modelBuilder.Entity("API_Backend.Models.DataVisualizationModel", b =>
                {
                    b.Navigation("VisualizationExperiments");
                });

            modelBuilder.Entity("API_Backend.Models.ExperimentRequest", b =>
                {
                    b.Navigation("AlgorithmParameters")
                        .IsRequired();

                    b.Navigation("ClusterParameters")
                        .IsRequired();

                    b.Navigation("ExperimentResult")
                        .IsRequired();
                });

            modelBuilder.Entity("API_Backend.Models.User", b =>
                {
                    b.Navigation("Algorithms");

                    b.Navigation("ExperimentRequests");

                    b.Navigation("StoredDataSets");
                });
#pragma warning restore 612, 618
        }
    }
}
